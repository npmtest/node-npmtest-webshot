{"/home/travis/build/npmtest/node-npmtest-webshot/test.js":"/* istanbul instrument in package npmtest_webshot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webshot/lib.npmtest_webshot.js":"/* istanbul instrument in package npmtest_webshot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webshot = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webshot = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webshot/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webshot && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webshot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webshot\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webshot.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_webshot.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webshot.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_webshot.__dirname +\n                    '/lib.npmtest_webshot.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webshot/webshot/lib/webshot.js":"var url = require('url')\n  , fs = require('graceful-fs')\n  , tmp = require('tmp')\n  , stream = require('stream')\n  , crossSpawn = require('cross-spawn')\n  , optUtils = require('./options')\n  , phantomScript = __dirname + '/webshot.phantom.js'\n  , extensions = ['jpeg', 'jpg', 'png', 'pdf']\n  , siteTypes = ['url', 'html', 'file'];\n\nmodule.exports = function() {\n\n  // Process arguments\n  var args = Array.prototype.slice.call(arguments, 0);\n  var cb = null;\n  var options = {};\n  var path = null;\n\n  /*\n    Possible valid arguments:\n    SITE, <OPTIONS>, CB\n    SITE, <OPTIONS>\n    SITE, PATH, <OPTIONS>, CB\n  */\n  var site = args.shift();\n\n  /*\n    <OPTIONS>, CB\n    <OPTIONS>\n    PATH, <OPTIONS>, CB\n  */\n  var last = args[args.length - 1];\n\n  if (Object.prototype.toString.call(last) == '[object Function]') {\n    cb = args.pop();\n  }\n\n  /*\n    <OPTIONS>\n    <OPTIONS>\n    PATH, <OPTIONS>\n  */\n  switch (args.length) {\n\n    case 1:\n      var arg = args.pop();\n\n      if (toString.call(arg) === '[object String]') {\n        path = arg;\n      } else {\n        options = arg;\n      }\n    break;\n\n    case 2:\n      path = args.shift();\n      options = args.shift();\n    break;\n  }\n\n  var streaming = !path;\n  var defaults = optUtils.mergeObjects(optUtils.caller, optUtils.phantom);\n\n  // Apply the compiled phantomjs path only if it compiled successfully\n  try {\n    defaults.phantomPath = require('phantomjs-prebuilt').path;\n  } catch (ex) {}\n\n  options = processOptions(options, defaults);\n\n  // Check that a valid fileType was given for the output image\n  var extension = (path)\n    ? path.substring(~(~path.lastIndexOf('.') || ~path.length) + 1)\n    : options.streamType;\n\n  if (!~extensions.indexOf(extension.toLowerCase())) {\n    return cb(\n      new Error('All files must end with one of the following extensions: '\n        + extensions.join(', ')));\n  }\n\n  // Check that a valid siteType was provided\n  if (!~siteTypes.indexOf(options.siteType)) {\n    var err = new Error(args.siteType + ' is not a valid sitetype.');\n    if (cb) return cb(err);\n    throw err;\n  }\n\n  // Add protocol to the site url if not present\n  if (options.siteType === 'url') {\n    site = url.parse(site).protocol ? site : 'http://' + site;\n  }\n\n  // Remove the given file if it already exists, then call phantom\n  var spawn = function() {\n    if (options.siteType === 'html') {\n      var obj = tmp.fileSync();\n      var tmpPath = obj.name;\n      fs.writeSync(obj.fd, site, null, 'utf-8');\n      fs.close(obj.fd);\n      options.siteType = 'file';\n      site = tmpPath;\n      return spawn();\n    } else {\n      return spawnPhantom(site, path, streaming, options, cb);\n    }\n  };\n\n  if (path) {\n    fs.exists(path, function(exists) {\n      if (exists) {\n        fs.unlink(path, function(err) {\n          if (err) return cb(err);\n          return spawn();\n        });\n      } else {\n        return spawn();\n      }\n    });\n  } else {\n    return spawn();\n  }\n};\n\n\n/*\n * Process the options object into the values to be exposed to phantom\n *\n * @param (Object) options\n * @param (Object) defaults\n * @return (Object)\n */\nfunction processOptions(options, defaults) {\n\n  // Alias 'screenSize' to 'windowSize'\n  options.windowSize = options.windowSize || options.screenSize;\n\n  // Alias 'userAgent' to 'settings.userAgent'\n  if (options.userAgent) {\n    options.settings = options.settings || {};\n    options.settings.userAgent = options.userAgent;\n  }\n\n  // Alias 'script' to 'onLoadFinished'\n  if (options.script) {\n    options.onLoadFinished = options.onLoadFinished || options.script;\n  }\n\n  // Fill in defaults for undefined options\n  var withDefaults = optUtils.mergeObjects(options, defaults);\n\n  // Convert function options to strings for later JSON serialization\n  optUtils.phantomCallback.forEach(function(optionName) {\n    var fnArg = withDefaults[optionName];\n\n    if (fnArg) {\n      if (toString.call(fnArg) === '[object Function]') {\n        withDefaults[optionName] = {\n          fn: fnArg.toString()\n        , context: {}\n        };\n      } else {\n        fnArg.fn = fnArg.fn.toString();\n      }\n    }\n  });\n\n  return withDefaults;\n}\n\n\n/*\n * Spawn a phantom instance to take the screenshot\n *\n * @param (String) site\n * @param (String) path\n * @param (Boolean) streaming\n * @param (Object) options\n * @param (Function) cb\n */\nfunction spawnPhantom(site, path, streaming, options, cb) {\n\n  // Filter out options that shouldn't be passed to the phantom process\n  var filteredOptions = optUtils.filterObject(options,\n    Object.keys(optUtils.phantom)\n      .concat(optUtils.phantomPage)\n      .concat(optUtils.phantomCallback));\n\n  filteredOptions.site = site;\n  filteredOptions.path = path;\n  filteredOptions.streaming = streaming;\n\n  var phantomArgs = [phantomScript, JSON.stringify(filteredOptions)];\n\n  if (options.phantomConfig) {\n    phantomArgs = Object.keys(options.phantomConfig).map(function (key) {\n      return '--' + key + '=' + options.phantomConfig[key];\n    }).concat(phantomArgs);\n  }\n\n  var phantomProc = crossSpawn.spawn(options.phantomPath, phantomArgs);\n\n  // This variable will contain our timeout ID.\n  var timeoutID = null;\n\n  // Whether or not we've called our callback already.\n  var calledCallback = false;\n\n  // Only set the timer if the timeout has been specified (by default it's not)\n  if (options.timeout) {\n    timeoutID = setTimeout(function() {\n\n      // The phantomjs process didn't exit in time.\n      // Double-check we didn't already call the callback already as that would\n      // happen when the process has already exited. Sending a SIGKILL to a PID\n      // that might be handed out to another process could be potentially very\n      // dangerous.\n      if (!calledCallback) {\n        calledCallback = true;\n\n        // Send the kill signal\n        phantomProc.kill('SIGKILL');\n\n        // Call our callback.\n        var err = new Error('PhantomJS did not respond within the given ' +\n                            'timeout setting.');\n        if (cb) return cb(err);\n        s.emit('error', err);\n      }\n    }, options.timeout);\n  }\n\n  if (!streaming) {\n    phantomProc.stderr.on('data', function(data) {\n      if (options.errorIfJSException) {\n        calledCallback = true;\n        clearTimeout(timeoutID);\n        cb(new Error('' + data))\n      }\n    });\n\n    phantomProc.on('exit', function(code) {\n      if (!calledCallback) {\n        calledCallback = true;\n\n        // No need to run the timeout anymore.\n        clearTimeout(timeoutID);\n        cb(code\n          ? new Error('PhantomJS exited with return value ' + code)\n          : null);\n      }\n    });\n  } else {\n    var s = new stream.Stream();\n    s.readable = true;\n\n    phantomProc.stdout.on('data', function(data) {\n      clearTimeout(timeoutID);\n      s.emit('data', new Buffer(''+data, 'base64'));\n    });\n\n    phantomProc.stderr.on('data', function(data) {\n      if (options.errorIfJSException) {\n        s.emit('error', ''+data);\n      }\n    });\n\n    phantomProc.on('exit', function() {\n      s.emit('end');\n    });\n\n    if (cb) {\n      cb(null, s);\n    } else {\n      return s;\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-webshot/webshot/lib/options.js":"// Options for the phantom script\nexports.phantom = {\n  windowSize: {\n    width: 1024\n  , height: 768\n  }\n, shotSize: {\n    width: 'window'\n  , height: 'window'\n  }\n, shotOffset: {\n    left: 0\n  , right: 0\n  , top: 0\n  , bottom: 0\n  }\n, defaultWhiteBackground: false\n, customCSS: ''\n, takeShotOnCallback: false\n, streamType: 'png'\n, siteType: 'url'\n, renderDelay: 0\n, quality: 75\n, errorIfStatusIsNot200: false\n, errorIfJSException: false\n, cookies: []\n, captureSelector: false\n, zoomFactor: 1\n};\n\n// Options that are just passed to the phantom page object\nexports.phantomPage = ['paperSize', 'customHeaders', 'settings'];\n\n// Options that are callbacks for various phantom events\nexports.phantomCallback = ['onAlert', 'onCallback', 'onClosing', 'onConfirm',\n  'onConsoleMessage', 'onError', 'onFilePicker', 'onInitialized',\n  'onLoadFinished', 'onLoadStarted', 'onNavigationRequested', 'onPageCreated',\n  'onPrompt', 'onResourceRequested', 'onResourceReceived',\n  'onResourceTimeout', 'onResourceError', 'onUrlChanged'];\n\n// Options that are used in the calling node script\nexports.caller = {\n  phantomPath: 'phantomjs'\n, phantomConfig: ''\n, timeout: 0\n};\n\n\n/*\n * Merge the two objects, using the value from `a` when the objects conflict\n *\n * @param (Object) a\n * @param (Object) b\n * @return (Object)\n */\nexports.mergeObjects = function mergeObjects(a, b) {\n  var merged = {};\n\n  Object.keys(a).forEach(function(key) {\n    merged[key] = toString.call(a[key]) === '[object Object]'\n      ? mergeObjects(a[key], b[key] || {})\n      : a[key] || b[key];\n  });\n\n  Object.keys(b).forEach(function(key) {\n    if (merged.hasOwnProperty(key)) return;\n    merged[key] = b[key];\n  });\n\n  return merged;\n};\n\n\n/*\n * Filter the object `obj` to contain only the given keys\n *\n * @param (Object) obj\n * @param (Array) keys\n * @return (Object)\n */\nexports.filterObject = function filterObject(obj, keys) {\n  var filtered = {};\n\n  keys.forEach(function(key) {\n    if (obj[key]) filtered[key] = obj[key];\n  });\n\n  return filtered;\n};\n"}